** 프로젝트 파일들 설명

app 폴더 : 내가 코드 짤 폴더 

page.js : 메인페이지 

layout.js : 메인페이지를 감싸는 용도의 페이지 

public 폴더 : 이미지나 static 파일 보관용 

api 폴더 : 서버기능 만드는 곳 

 

next.config.js : nextJS 설정 파일 

node_modules 폴더 : 설치한 라이브러리 보관용 폴더 

package.json : 설치한 라이브러리 버전 기록용 파일

===========================================

.env.local 같은 환경변수는 클라이언트 컴포넌트에 정보가 노출이 되면 안되기 때문에
환경변수는 layout.js와 같은 서버 컴포넌트에서 접속이 가능함

* But 만약 웹브라우저를 위한 환경변수를 사용하고 싶다면??
-> 'NEXT_PUBLIC_' 를 접두사로 붙이면 됨 

===========================================

* 동적 라우팅 (Dynamic Routing)이란?

- 항상 미리 정의된 경로를 사용할 수 있는 것은 아니다.
예를 들어, 게시물의 경로는 /page/1, /page/2 … 처럼 되어있는데, 
모든 경로에 대해 미리 정의하거나 페이지 컴포넌트를 생성하는 일은 굉장히 비효율적이고, 정확하지 않을 수 있다.

이때 사용하는 것이 동적 라우팅이다!!
페이지 파일을 생성할때 대괄호[]를 추가하면 해당 페이지 컴포넌트는 동적으로 라우팅된다.

ex)
type Props = {
  params: {
    location: string;
  };
};

export default function Detail({ params }: Props) {
  return (
    <>
      <h1>Detail {params.location}</h1>
    </>
  );
}
~~> 이런식으로 해주면 라우팅이 동적으로 바뀌어 url(location)이 바뀌면 페이지에 h1글씨도 자동으로 바뀜 

===========================================

* server? client? (컴포넌트)

** client component
- 이벤트가 들어가는 행위(onClick, on... 등등) 자체는 서버 컴포넌트가 용납할 수 없는 동작이다.
그렇기 때문에 이벤트가 들어가는 컴포넌트는 클라이언트 컴포넌트가 되어야 한다!!  (컴포넌트 최상단에 'use client' 라고 명시해주면 됨)

- 클라이언트 컴포넌트는 최대한 말단으로 보내야 하기 때문에 -> 클라이언트 컴포넌트인 경우 별도의 컴포넌트로 빼주면 나중에 말단으로 빼기 쉬워진다. 


** server component

===========================================

* 에러 컴포넌트
- 에러 컴포넌트는 반드시 클라이언트 컴포넌트여야 한다! => 에러 컴포넌트에 'use client' 추가 해줌

===========================================
* 캐시

캐시를 풀기 위해선 'revalidateTag'라는 함수를 이용해야 한다.
-> revalidateTag라는 함수는 서버에서만 동작을 수행할 수 있다. (revalidate 컴포넌트 참조)
